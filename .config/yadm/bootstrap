#!/bin/env sh

set -eu # exit on error and unset variables

# Function to install Homebrew on macOS
install_brew() {
	if ! command -v brew >/dev/null 2>&1; then
		echo "Installing Homebrew"
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	fi

	if [ -f "$HOME/.Brewfile" ]; then
		echo "Updating Homebrew bundle"
		brew bundle --global
	fi

	# Dock instantly leap back
	defaults write com.apple.dock autohide-time-modifier -int 0
	killall Dock
}

# Function to install shell utilities on Arch Linux and macOS
install_shell_utils() {
	if [ "$system_type" = "Linux" ]; then
		. /etc/os-release
		if [ "$ID" = "arch" ]; then
			if [ ! -x "$(command -v ansible)" ]; then
				printf "\n--- Setting Ansible ---\n\n"
				sudo pacman -Syu --noconfirm ansible python python-pip python-argcomplete
				return
			fi
		elif [ "$ID" = "ubuntu" ]; then
			if ! dpkg -s ansible >/dev/null 2>&1; then
				printf "\n--- Setting Ansible ---\n\n"
				sudo apt-get update
				sudo apt-get install -y software-properties-common
				sudo apt-add-repository -y ppa:ansible/ansible
				sudo apt-get update
				sudo apt-get install -y ansible
				sudo apt-get install -y python3 python3-pip python3-watchdog python3-argcomplete
				sudo activate-global-python-argcomplete
			fi
		else
			echo "Unsupported OS"
			exit 1
		fi
		printf "\n--- Starting Ansible Playbook ---\n\n"
		export ANSIBLE_CONFIG="$HOME"/.config/yadm/ansible/ansible.cfg
		ansible-playbook -K -i "localhost," -c local "$HOME"/.config/yadm/ansible/setup.yml
	elif [ "$system_type" = "Darwin" ]; then
		printf "\n--- Setting up shell utils for macOS ---\n\n"
		brew install \
			bat \
			eza \
			fd \
			fzf \
			ripgrep \
			tmux \
			git \
			zoxide \
			starship \
			trash-cli \
			neovim \
			fastfetch
	fi
}

# Main script execution
system_type=$(uname -s)

if [ "$system_type" = "Darwin" ]; then
	install_brew
fi

install_shell_utils

printf "\n*** Script completed successfully. {^_^} ***\n"
