#!/bin/env bash
[[ -f "$HOME/.local/ai/sylvie" ]] && source "$HOME/.local/ai/sylvie" # Loads the $PATH Variable and Exports

# custom ssher
cch() {
	[ "$TERM" = "xterm-kitty" ] && export TERM=xterm-256color && cchterm=1
	local yellow='\033[1;33m'
	local reset='\033[0m'
	host=$1
	if [ -z "$1" ]; then
		while true; do
			echo -ne "${yellow}host:${reset} "
			read -r host
			[ -z "$host" ] && echo "host is required. Please provide a value." && continue || break
		done
	fi
	case "$host" in
	"piedisback") echo "connecting to piedisback...." && ssh piedisback ;;

	*)
		while true; do
			echo -ne "${yellow}Username:${reset} "
			read -r username
			[ -z "$username" ] && echo "Username is required. Please provide a value." && continue
			echo -ne "${yellow}Port (default 22):${reset} "
			read -r port
			port=${port:-22}
			echo -ne "${yellow}Key Path (optional):${reset} "
			read -r keypair
			getin
			break
		done
		;;
	esac
	[ "$cchterm" -eq 1 ] && export TERM=xterm-kitty
}

getin() {
	[ -n "$keypair" ] && ssh -i "$keypair" "$username@$host" -p "$port" || ssh "$username@$host" -p "$port"
}

# Chris Titus - Additions GitHub
# Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf "$archive" ;;
			*.tar.gz) tar xvzf "$archive" ;;
			*.bz2) bunzip2 "$archive" ;;
			*.rar) rar x "$archive" ;;
			*.gz) gunzip "$archive" ;;
			*.tar) tar xvf "$archive" ;;
			*.tbz2) tar xvjf "$archive" ;;
			*.tgz) tar xvzf "$archive" ;;
			*.zip) unzip "$archive" ;;
			*.Z) uncompress "$archive" ;;
			*.7z) 7z x "$archive" ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

md() { mkdir -p "$1" && cd "$1" || return; }

ai() { tgpt "$*"; }

# apt to nala:
if [ -x /bin/apt ]; then
	apt() {
		command nala "$@"
	}
	sudo() {
		[ "$1" = "apt" ] && shift && command sudo nala "$@" || command sudo "$@"
	}
fi

fkbps() {
	if [[ -z "$1" ]]; then
		echo "usage: fkbps <file>"
		return 1
	fi

	local bitrate
	bitrate=$(ffprobe -v error -show_entries format=bit_rate -of default=noprint_wrapper=1:nokey=1 "${1}" 2>/dev/null)

	if [[ -n "$bitrate" ]]; then
		echo "$(awk "BEGIN {print $bitrate/1000}") kbps"
	else
		echo "Could not determine bitrate"
	fi

}
